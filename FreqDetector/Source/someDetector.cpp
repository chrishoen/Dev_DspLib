/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "stdafx.h"

#define  _SOMEDETECTOR_CPP_
#include "someDetector.h"

namespace Some
{

//******************************************************************************
//******************************************************************************
//******************************************************************************

Detector::Detector()
{
   initialize();
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void Detector::initialize()
{
   mK = 0;

   // Filter coefficients from matlab

   int tBSize = 5;

   double tBArray[] = {
      0.0000000058821046042912133000000000000000,
      0.0000000000000000000000000000000000000000,
      -0.0000000117642092085824270000000000000000,
      0.0000000000000000000000000000000000000000,
      0.0000000058821046042912133000000000000000 };

   int tASize = 5;

   double tAArray[] = {
      1.0000000000000000000000000000000000000000,
      -3.9997077793362688000000000000000000000000,
      5.9991986541407023000000000000000000000000,
      -3.9992739592734186000000000000000000000000,
      0.9997830858858662900000000000000000000000 };

   // Initialize bandpass filter
   mBandpassFilter.initialize(tBSize,tASize,tBArray,tAArray);

   // Initialize alpha filter
   // 10 second step response at 4096 Fs
   mAlphaStats.initialize(0.000731113);

}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Put input to frequency detector

void Detector::put(double aInput)
{
   // Bandpass filter the input
   double tY = mBandpassFilter.put(aInput);

   // Get mean and standard deviation on the 
   // absolute value of the filter output
   mAlphaStats.put(fabs(tY));

   // Store mean and standard deviation
   mEX = mAlphaStats.mEX;
   mUX = mAlphaStats.mUX;

   // Update
   mK++;
}

//******************************************************************************

void Detector::show()
{
   printf("%3d $$ %8.6f %8.6f\n",
      mK,
      mEX,
      mUX);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Test

void Detector::test(double aF)
{
   Dsp::Filter::TestSignal tTestSignal;
   tTestSignal.initialize(10.0, 1.0, 0.0, 4096.0, aF);

   for (int i = 0; i<4096*1000; i++)
   {
      put(tTestSignal.advance());
   }
}


}//namespace