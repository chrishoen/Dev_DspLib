/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <stdio.h>
#include <string.h>
#include <math.h>

#include "dspHistoryLoopClock.h"
#include "dspHistoryDelayEstimator.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace Dsp
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// Constructor

HistoryDelayEstimator::HistoryDelayEstimator()
{
   reset();
}

void HistoryDelayEstimator::reset()
{
   mHistory1 = 0;
   mHistory2 = 0;
   mDelayEstimate = 0.0;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Perform the search.

double HistoryDelayEstimator::search(
      History* aHistory1,
      History* aHistory2,
      double   aSearchDelay,
      double   aTolerance,
      int      aMaxIterations)
{
   // Store these. They will be used by the error function.
   mHistory1 = aHistory1;
   mHistory2 = aHistory2;

   mDelayEstimate = BaseClass::search(
     -aSearchDelay,
      aSearchDelay,
      aTolerance,
      aMaxIterations);

   return mDelayEstimate;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Error function.

double HistoryDelayEstimator::function(double aX)
{
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace
