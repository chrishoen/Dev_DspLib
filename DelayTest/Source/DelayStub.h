#pragma once

/*==============================================================================
==============================================================================*/
#include "dspGoldSearch.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// This is a stub for the golden section search.

class DelayStub : public Dsp::GoldSearchBase
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Search variables.
   double mXAinitial;
   double mXBinitial;

   double mTolerance;
   int    mMaxIterations;

   double mA,mB,mC,mD;

   double mXDelay;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Constructor and initialization.

   // Constructor.
   typedef Dsp::GoldSearchBase BaseClass;
   DelayStub();
   void reset();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Write to the history.

   // Perform the search.
   double search();

   // f(x).
   double function(double aX) override;
      
   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // More.

   void show();
};

//******************************************************************************


