/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <stdio.h>
#include <string.h>
#include <math.h>

#include "DelayEstimator.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// Constructor

DelayEstimator::DelayEstimator()
{
   reset();
}

void DelayEstimator::reset()
{
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Perform the search.

double DelayEstimator::search(
      double aXAinitial,
      double aXBinitial,
      double aTolerance,
      double aMaxIterate)
{
  double a   = aXAinitial;
  double b   = aXBinitial;
  double tol = aTolerance;

  double gr = (sqrt(5) + 1) / 2;

  double c = b - (b - a) / gr;
  double d = a + (b - a) / gr; 

  int tCount = 0;

  while (1)
  {
     if (fabs(c - d) <= tol)
     {
        double x = (b + a) / 2;
        printf("GSS PASS %d $$ %10.6f\n", tCount,x);
        return x;
     }

     if (++tCount > aMaxIterate)
     {
        double x = (b + a) / 2;
        printf("GSS FAIL\n");
        return 0.0;
     }

     if (function(c) < function(d))
     {
        b = d;
     }
     else
     {
        a = c;
     }

     c = b - (b - a) / gr;
     d = a + (b - a) / gr; 
  }

}
   
