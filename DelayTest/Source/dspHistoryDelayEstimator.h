#pragma once

/*==============================================================================
History delay estimator
==============================================================================*/
#include "dspGoldSearch.h"
#include "dspHistory.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace Dsp
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// Signal history delay estimator. Estimate the delay between two similar 
// signals.

class HistoryDelayEstimator : public Dsp::GoldSearchBase
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   History* mHistory1;
   History* mHistory2;

   // Search variables.
   double mDelayEstimate;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Constructor and initialization.

   // Constructor.
   typedef Dsp::GoldSearchBase BaseClass;
   HistoryDelayEstimator();
   void reset();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Write to the history.

   // Perform the search.
   double search(
      History* aHistory1,
      History* aHistory2,
      double   amSearchDelay,
      double   aTolerance,
      int      aMaxIterations);

   // f(x). Error function.
   double function(double aX) override;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // More.

};

//******************************************************************************
}//namespace

