#pragma once

/*==============================================================================
==============================================================================*/
#include "Special_Parms.h"
#include "dspFunctionObject.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************




//******************************************************************************
//******************************************************************************
//******************************************************************************
// This is a base class for classes that encapsualte function objects. 

class TestFunctionObject : public Dsp::BaseFunctionObject
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members:

   Special_Parms mP;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members:
	
	//Coefficient Params
	double mC0;
	double mC1;
	double mC2;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Infastrucure:

	// Constructor.
	TestFunctionObject();
	TestFunctionObject(Special_Parms& aP);
	void initialize(Special_Parms& aP);
   void reset();


   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods:

   // This evaluates the function at the input value array.
   void evaluateFunction(
      Eigen::VectorXd& aX,                  // Input
      Eigen::VectorXd& aY) override;       // Output

   // This evaluates the jacobian of the function at the input value array.
  void evaluateJacobian(
      Eigen::VectorXd& aX,                  // Input
      Eigen::MatrixXd& aJacobian) override;        // Output

   // This returns the dimension of the function input vector.
  int dimension() override { return 1; }
};

//******************************************************************************
//******************************************************************************
//******************************************************************************

