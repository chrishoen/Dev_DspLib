/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "stdafx.h"

#include "dsp_math.h"
#include "dspFilterAlphaFloat.h"

namespace Dsp
{
namespace Filter
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************

void AlphaOneFloat::initialize(float aLambda)
{
   // Calculate filter parameters.
   float L  = aLambda;
   float L2 = L*L;
   float A = (-L2 + L*sqrtf(16 + L2))/8;
   mAlpha = A;

   // Initialize filter variables.
   mY   = 0.0;
   mXX  = 0.0;
   mFirstFlag = true;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void AlphaOneFloat::initializeFromAlpha(float aAlpha)
{
   mAlpha = aAlpha;
   mY   = 0.0;
   mXX  = 0.0;
   mFirstFlag = true;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void AlphaOneFloat::initializeFromLambda(float aLambda)
{
   initialize(aLambda);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Initialize from step response time and threshold.

void AlphaOneFloat::initializeFromStep(float aTs, float aStepTime, float aStepThresh)
{
   if (aStepTime < aTs) aStepTime = aTs;
   if (aStepThresh > 1) aStepThresh = 1;
   if (aStepThresh < 0) aStepThresh = 0;

   float n = aStepTime / aTs;
   float c = 1 - aStepThresh;
   float b = (float)exp(log(c) / n);
   float a = 1 - b;

   mAlpha = a;
   mY = 0.0;
   mXX = 0.0;
   mFirstFlag = true;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void AlphaOneFloat::setFirst()
{
   mY   = 0.0;
   mXX  = 0.0;
   mFirstFlag = true;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

float AlphaOneFloat::put(float aY)
{
   if (mFirstFlag)
   {
      mFirstFlag = false;
      mXX = aY;
   }

   mY  = aY;

   float a = mAlpha;

   mXX = (1-a)*mXX + a*mY;

   return mXX;
}

float AlphaOneFloat::put(bool aCondition)
{
   if (aCondition) return put(1.0f);
   else            return put(0.0f);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

}//namespace
}//namespace

