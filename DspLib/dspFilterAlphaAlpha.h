#pragma once
/*==============================================================================
alpha, beta, gamma filters
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace Dsp
{
namespace Filter
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Second order low pass filter with critical damping.
// This is a cascade of two alpha filters.
//
template <typename real_t>
class AlphaAlpha
{
public:
   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Input variable.
   real_t mY;

   // Output variables.
   real_t mX1;
   real_t mXX;

   // Filter parameters
   real_t mAlpha;

   // True for first sample.
   bool mFirstFlag;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Initialize from alpha.

   void initializeFromAlpha(double aAlpha)
   {
      mAlpha = (real_t)aAlpha;
      mY   = 0.0;
      mX1  = 0.0;
      mXX  = 0.0;
      mFirstFlag = true;
      return;
      printf("AlphaAlpha::initializeFromAlpha %8.8f\n", mAlpha);
   }

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Set the first flag true.

   void setFirst()
   {
      mY  = 0.0;
      mX1 = 0.0;
      mXX = 0.0;
      mFirstFlag = true;
   }

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Put input value, return filtered output.

   real_t put(real_t aY)
   {
      if (mFirstFlag)
      {
         mFirstFlag = false;
         mX1 = aY;
         mXX = aY;
      }
      // Store input.
      mY  = aY;

      // Implement the filter. Cascade two alpha filters.
      // x1 = (1-a)*x1 + a*y
      // x = (1-a)*x + a*x1

      mX1 += mAlpha*(mY - mX1);
      mXX += mAlpha*(mX1 - mXX);

      return mXX;
   }
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace
}//namespace

