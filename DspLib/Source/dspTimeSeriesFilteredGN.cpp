/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <stdio.h>
#include <string.h>
#include <math.h>

#include "dsp_math.h"
#include "dspStatistics.h"
#include "dspTimeSeriesFilteredGN.h"

namespace Dsp
{


//******************************************************************************
//******************************************************************************
//******************************************************************************
// Constructor

TimeSeriesFilteredGN::TimeSeriesFilteredGN()
{
   reset();
}

void TimeSeriesFilteredGN::reset()
{
   BaseClass::reset();
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Initialize

void TimeSeriesFilteredGN::initialize()
{
   BaseClass::initialize();

   // Filter coefficients from matlab

   int tBSize = 5;

   double tBArray[] = {
      0.0000008984861463970644700000000000000000,
      0.0000035939445855882579000000000000000000,
      0.0000053909168783823870000000000000000000,
      0.0000035939445855882579000000000000000000,
      0.0000008984861463970644700000000000000000 };

   int tASize = 5;

   double tAArray[] = {
      1.0000000000000000000000000000000000000000,
      -3.8358255406473480000000000000000000000000,
      5.5208191366222268000000000000000000000000,
      -3.5335352194630136000000000000000000000000,
      0.8485559992664766200000000000000000000000 };

   // Initialize bandpass filter
   mFilter.initialize(tBSize,tASize,tBArray,tAArray);
}
   
//******************************************************************************
//******************************************************************************
//******************************************************************************
// Show

void TimeSeriesFilteredGN::show()
{
   BaseClass::show();
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void TimeSeriesFilteredGN::generate()
{
   //---------------------------------------------------------------------------
   // Initialize

   initialize();

   //---------------------------------------------------------------------------
   // Generate low pass filtered guassian noise.
   // The low pass filter is two cascaded first order alpha filters.

   for (int k = 0; k < mNumSamples; k++)
   {
      // Get noise.
      double tX = getNoise();

      // Low pass filter the noise.
      mFilter.put(tX);
      mX[k] = mFilter.mY;
   }

   //---------------------------------------------------------------------------
   // Normalize to get the desired expectation and uncertainty.

   normalize();
}

}//namespace