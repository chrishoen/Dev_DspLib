/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <stdio.h>
#include <string.h>
#include <math.h>

#include "dsp_math.h"
#include "dspStatistics.h"
#include "dspTimeSeriesFilteredGN.h"

namespace Dsp
{


//******************************************************************************
//******************************************************************************
//******************************************************************************
// Constructor

TimeSeriesFilteredGN::TimeSeriesFilteredGN()
{
   reset();
}

void TimeSeriesFilteredGN::reset()
{
   BaseClass::reset();
   mBSize=0;
   mASize=0;
   mBArray=0;
   mAArray=0;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Initialize

void TimeSeriesFilteredGN::initialize()
{
   BaseClass::initialize();

   // Initialize bandpass filter
   mFilter.initialize(mBSize,mASize,mBArray,mAArray);
}
   
//******************************************************************************
//******************************************************************************
//******************************************************************************
// Show

void TimeSeriesFilteredGN::show()
{
   BaseClass::show();
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void TimeSeriesFilteredGN::generate()
{
   //---------------------------------------------------------------------------
   // Initialize

   initialize();

   //---------------------------------------------------------------------------
   // Generate low pass filtered guassian noise.
   // The low pass filter is two cascaded first order alpha filters.

   for (int k = 0; k < mNumSamples; k++)
   {
      // Get noise.
      double tX = getNoise();

      // Low pass filter the noise.
      mFilter.put(tX);
      mX[k] = mFilter.mY;
   }

   //---------------------------------------------------------------------------
   // Normalize to get the desired expectation and uncertainty.

   normalize();
}

}//namespace