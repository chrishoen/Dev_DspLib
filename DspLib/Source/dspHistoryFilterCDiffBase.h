#pragma once

/*==============================================================================
Base class for signal history filters.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "dspHistory.h"
#include "dspHistoryFilterParms.h"

namespace Dsp
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// This is a base class for signal history filters, which are linear
// operators on the set of histories F:H->H.

class HistoryFilterCDiffBase
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Parameters. These are read from a parms file.

   HistoryFilterParms mParms;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   double* mC;      // Central difference coefficients.

   // If true then memory has been allocated.
   bool    mMemoryFlag;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   HistoryFilterCDiffBase();
   ~HistoryFilterCDiffBase();
   virtual void show();

   // Allocate memory.
   void initialize(HistoryFilterParms& aParms);

   // Deallocate memory.
   void finalize();

   // Apply the filter from the input to the output. F:X->Y
   virtual void operate(History& aX,History& aY)=0;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Helpers.

   // Create the destination history as clone of the source history that has
   // the same size and time array, but has a zero value array.
   void createTimeClone(History& aX,History& aY);

};

//******************************************************************************
}//namespace


