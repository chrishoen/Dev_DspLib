/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <stdio.h>
#include <string.h>
#include <math.h>

#include "dsp_math.h"
#include "dspStatistics.h"
#include "dspTimeSeriesLPGN.h"

namespace Dsp
{


//******************************************************************************
//******************************************************************************
//******************************************************************************
// Constructor

TimeSeriesLPGN::TimeSeriesLPGN()
{
   reset();
}

void TimeSeriesLPGN::reset()
{
   BaseClass::reset();
   mN = 2;
   mFc = 1.0; 
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Initialize

void TimeSeriesLPGN::initialize()
{
   BaseClass::initialize();

   mFilter.initialize(mN,mFs,mFc);
}
   
//******************************************************************************
//******************************************************************************
//******************************************************************************
// Show

void TimeSeriesLPGN::show()
{
   BaseClass::show();
   printf("mN           %10d\n",  mN);
   printf("mFc          %10.4f\n",mFc);
   mFilter.show();
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void TimeSeriesLPGN::generate()
{
   //---------------------------------------------------------------------------
   // Initialize

   initialize();

   //---------------------------------------------------------------------------
   // Generate low pass filtered guassian noise.
   // The low pass filter is two cascaded first order alpha filters.

   for (int k = 0; k < mNumSamples; k++)
   {
      // Get noise.
      double tX = getNoise();

      // Low pass filter the noise.
      mFilter.put(tX);
      mX[k] = mFilter.mY;
   }

   //---------------------------------------------------------------------------
   // Normalize to get the desired expectation and uncertainty.

   normalize();
}

}//namespace