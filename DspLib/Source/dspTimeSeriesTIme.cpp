/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <stdio.h>
#include <string.h>
#include <math.h>

#include "dsp_math.h"
#include "dspTimeSeriesTime.h"

namespace Dsp
{


//******************************************************************************
//******************************************************************************
//******************************************************************************
// Constructor

TimeSeriesTime::TimeSeriesTime()
{
   reset();
}

TimeSeriesTime::~TimeSeriesTime()
{
   if (mT) delete mT;
}

void TimeSeriesTime::reset()
{
   mFs = 1.0;
   mTs = 1.0 / mFs;
   mT  = 0;

   mDuration = 10.0;
   mNumSamples = (int)(mDuration * mFs);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Initialize

void TimeSeriesTime::initialize()
{
   if (mFs != 0.0)
   {
      mTs = 1.0 / mFs;
   }
   else if (mTs != 0.0)
   {
      mFs = 1.0 / mTs;
   }

   mNumSamples = (int)(mDuration * mFs);
   mT = new double[mNumSamples];
}
   

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Show

void TimeSeriesTime::show()
{
   printf("mDuration    %10.4f\n",mDuration);
   printf("mNumSamples  %10d\n",  mNumSamples);
   printf("mFs          %10.4f\n",mFs);
   printf("mTs          %10.4f\n",mTs);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void TimeSeriesTime::generate()
{
   initialize();

   double tTime=0.0;
   for (int k = 0; k < mNumSamples; k++)
   {
      mT[k] = tTime;
      tTime += mTs;
   }
}

}//namespace