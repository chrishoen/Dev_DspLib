#pragma once/*==============================================================================
System information.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <string>
#include "json.h"
#include "dspCalTable2.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************

class BirthCertificateDA;
class BirthCertificateTTA;
class BirthCertificateCU;

//******************************************************************************
//******************************************************************************
//******************************************************************************
// This class contains system information. It reads values from birth
// certificates and software versions and writes values to a json file.

class MyCalTable
{
public:
   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Constants.

   static const int cMaxStringSize = 200;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // json file path.
   char mFilePath[cMaxStringSize];

   // True if valid.
   bool mValidFlag;

   // Calibration table.
   Dsp::CalTable2 mTable;

   // Table of calibration x,y pairs. Read from json file.
   std::vector<std::pair<double, double>> mTableData;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   MyCalTable();

   // Read json file and initialize the cal table.
   void initialize();
    
   // Get an interpolated y value from an input x value.
   double getYfromX(double aX);

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Support.
   void show(int aPrintFilter = 0);
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
